#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# This file is part of "convert2ugrid" tool
#
# Author: Nikolai Chernikov, nikolai.chernikov.ru@gmail.com


import process_mossco_netcdf
import numpy as np




def create_magnitude_variable_from_x_y_component(VARS, varname, varval, mask=None, log=False):
    '''
    in:
    ----
        VARS     - dictionary generated by function process_cdl.read_file_with_only_variables()
        varname  - string, item-key of a dictionary VARS, should correspond to varval
        varval   - item-value of a dictionary VARS, should correspond to varname
                    varval[0] >>> datatype
                    varval[1] >>> [dim1,dim2,...]
                    varval[2] >>> dict(attributes)
                    Note: all values are stored as strings
    out:
    ----
        magnitude - False, or Ndimensional numpy array (maybe masked, depending on the inputs).
                    It will usually be 1D array (<...> in selections such as x[t, ..., f] is made
                    to increase flexibility of accepted variables. Nevertheless mostly it will be x[t, f])

    '''
    magnitude = None
    # -----------------------------------------------------------------------------------------------
    # Create auto variables
    # -----------------------------------------------------------------------------------------------
    if '_auto_creation' in varval[2].keys():
        if log: print 'Autocreation-variable'
        _fnx = VARS[ varval[2]['_auto_creation'].split(',')[0].strip() ] [2]['_mossco_filename']
        _fny = VARS[ varval[2]['_auto_creation'].split(',')[1].strip() ] [2]['_mossco_filename']
        _vnx = VARS[ varval[2]['_auto_creation'].split(',')[0].strip() ] [2]['_mossco_varname']
        _vny = VARS[ varval[2]['_auto_creation'].split(',')[1].strip() ] [2]['_mossco_varname']

        # -----------------------------------------------------------------------------------------------
        # now check which function (read_mossco_nc_3d, read_mossco_nc_4d) to use to get data....
        # -----------------------------------------------------------------------------------------------
        if varname.endswith('_2d'):
            x, _ = process_mossco_netcdf.read_mossco_nc_3d(_fnx, _vnx, mask=mask)
            y, _ = process_mossco_netcdf.read_mossco_nc_3d(_fny, _vny, mask=mask)
            magnitude = np.zeros(x.shape)
            for t in xrange(x.shape[0]):
                for f in xrange(x.shape[-1]):
                    _x = x[t, ..., f]
                    _y = y[t, ..., f]
                    _magnitude = (_x**2 + _y**2)**(1./2.)
                    magnitude[t, ..., f] = _magnitude

        elif varname.endswith('_3d'):
            x, _ = process_mossco_netcdf.read_mossco_nc_4d(_fnx, _vnx, mask=mask)
            y, _ = process_mossco_netcdf.read_mossco_nc_4d(_fny, _vny, mask=mask)
            magnitude = np.zeros(x.shape)
            for t in xrange(x.shape[0]):
                for z in xrange(x.shape[1]):
                    for f in xrange(x.shape[-1]):
                        _x = x[t, z, ..., f]
                        _y = y[t, z, ..., f]
                        _magnitude = (_x**2 + _y**2)**(1./2.)
                        magnitude[t, ..., f] = _magnitude

    return magnitude
